dizionario: una struttura dati che permette di associare un valore a una chiave

hash table: un dizionario in cui le chiavi sono generate da una hash function

funzione di hash: ad esempio è il modulo di un numero h(k) -> k % m

algoritmo deterministico: a parità di input restituisce sempre lo stesso risultato

la risoluzione delle collisioni avviene attraverso 
	probing lineare (k, i) -> h(k) + i
	probing quadratico (k, i) -> h(k) + i^2
	double hashing (k, i) -> [ h(k) + i * h2(k) ] % m
	
bloom filter: struttura dati probabilistica, progettata per il test di appartenenza di un elemento in un insieme.
Ci possono essere falis positivi (elemento segnalato presente anche quando non lo è) ma non falsi negativi.
Per minimizzare i falsi positivi usiamo più funzioni di hash e mappiamo i risultati su più array di bit.

programmazione dinamica: è un paradigma usato per risolvere problemi di ottimizzazione, ovvero trovare la soluzione 
più efficiente per un certo problema. Si utilizza un approccio ricorsivo, dove però, al contrario del paradigma 
divide et impera, i sottoproblemi del problema più grande sono sovrapposti tra loro e non indipendenti.
Per questo motivo è possibile memorizzare i valori a partire dal caso base e procedendo fino al problema più grande
seguendo un approccio bottom-up, prima risolvo i sottoproblemi più piccoli e usi tali problemi per risolvere
i problemi più grandi che contengono le soluzioni precedenti.

heap: è una struttura dati ad albero con prop strutturale -> albero binario quasi completo, l'inserimento di un
nuovo elemento viene sempre fatto nel nodo foglia. prop sui dati -> i nodi hanno figli >= (max-heap) o <= (min-heap)

reheapification-upward: sposta ricorsivamente il nodo foglia più a dx verso l'alto (i suoi antenati), 
nel caso non sia rispettata la prop sui dati. O(logn)

reheapification-downward: sposta ricorsivamente il nodo radice verso il basso (i suoi discendenti) fin tanto
che non è ristabilita la prop sui dati. O(logn)

heapsort: su un heap tolgo il nodo radice, si mette in un array. sposto il nodo foglia nel nodo radice.
Reheapification-downward. ripeto per tutti i nodi dell'albero. O(nlogn)

visita in-order: pallino nel centro, ricorsivamente, stampo il valore in mezzo alle 2 chiamate ricorsive 
(sottoalbero dx e sx)

bst (abr): binary search tree (albero binario di ricerca) è un albero binario che può essere sbilanciato.
le operazioni costano O(h), quindi O(n) nel caso peggiore (completamente sbilanciato).
La prop sui dati è che ongi nodo ha chiavi <= nel proprio sottoalbero sx e >= nel proprio sottoalbero dx

selection sort: scandisce l'array, aggiornando di volta in volta il minimo, poi lo mette in testa.
Simile all'heap sort solo che la scansione in questo caso cosa O(n) mentre nell'heapsort O(logn).
Costo dell'algoritmo O(n^2)

insertion sort: scandisce l'array, se l'elemento corrente è > del precedente viene fatto uno scambio finchè il 
precedente elemento non < dell'elemento corrente.
Costo O(n^2)

divide et impera: un paradigma per risolvere un problema dividendolo in sotto problemi più piccoli (DIVIDE)
Quando il problema è abbastanza piccolo (caso base) allora è possibile risolverlo facilmente (IMPERA).
I sottoproblemi sono disgiunti e quindi non è possibili memorizzare i riultati intermedi come nella
programmazione dinamica.
Quando i sottoproblemi sono stati risolti vengono ricombinati insieme per risolvere il problema
originale (COMBINA).

merge sort: utilizza il paradigma divide-et-impera per ordinare un array (non in-place). Divide l'array in
sottoproblemi più piccoli fino ad arrivare al caso base. Vengono ricombinati i sottoproblemi in ordine.
O(nlogn)

ricerca lineare: ricerca un elemento in una collezione in modo sequenziale, nel caso peggiore vengono
scanditi tutti gli elementi della collezione. O(n)

ricerca binaria: per eseguirla è necessario che la collezione sia ordinata. Dato un elemento si va a 
cercare a metà della collezione. se l'elemento è inferiore si va a cercare nella metà della metà inferiore, 
altrimenti in quella superiore.

gramatica: una quadrupla formata da <Σ, N, P, S> dove Σ = caratteri terminali, N = caratteri non terminali
P = insieme finito di produzioni, S = simbolo iniziale

2-3 albero: una struttura dati ad albero dove i dati sono memorizzati solo nelle foglie.
ogni nodo interno deve avere min2 max 3 figli. i dati (foglie) sono tutti allo stesso livello.
i nodi interni contengono degli indici (S) la chiave masssima contenuta nel sottoalbero sx e, 
se il nodo ha 3 figli, (M) la chiave chiave del sottoalbero centrale. costo delle operazioni logaritmico

lambda astrazione: oggetto inserito nell'ambiente dinamico a seguito di una dichiarazione di funzione
<id-funzione> <lambda-astrazione> composto da { parametri-formali, chiusura }

chiusura (closure): < ambiente di memoria> nel caso di scope statico l'ambiente comprende le occorrenze
di legame a eventuali identificatori liberi all'interno della funzione, in scope dinamico l'ambiente 
è vuoto

scope di blocco: un dato identificatore è visibile solo nel blocco in cui è stato dichiarato.

3-sat: data una formula booleana dove ogni clausola contiene esattamente 3 variabili e ogni clausola
è legata in AND c'è da stabilire se esiste un modo di assegnare i valore x1, x2, x3 tale per cui
la formula risulti vera. è un problema NP-completo.






